AWSTemplateFormatVersion: "2010-09-09"
Description: Creates the necessary IAM roles and policies for Syntinel.
Parameters:
  PolicyName:
    Type: String
    Default: syntinel-resolver-ec2utils-policy
    Description: The name for the policy that grants access to the EC2Utils resolver.

  RoleName:
    Type: String
    Default: syntinel-resolver-ec2utils-role
    Description: The name for the role allowing lambda to work with EC2.

  PolicyPermissionBoundry:
    Type: String
    Default: arn:aws:iam::286148036853:policy/WS-0096-pol_PlatformUserBoundary
    Description: If a policy permission boundry is required, please enter the full arn here.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "IAM Policies and Roles (Required)"
      Parameters:
      - PolicyName
      - RoleName
    - Label:
        default: "Role Permission Boundry (If Needed)"
      Parameters:
      - PolicyPermissionBoundry

Conditions:
    PolicyPermissionBoundryProvided : !Not [ !Equals [!Ref PolicyPermissionBoundry, ""] ] 

Resources: 
  EC2UtilsPolicy: 
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: !Ref PolicyName
      Description: Policy that grants access to manipulate EC2 instances.
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:Start*
          - ec2:Stop*
          - ec2:*
          Resource: "*"
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*

  EC2UtilsRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Ref RoleName
      Description: Role to allow Lambda functions to work with EC2.
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - !Ref EC2UtilsPolicy
      PermissionsBoundary: !If [ PolicyPermissionBoundryProvided, !Ref PolicyPermissionBoundry, !Ref "AWS::NoValue" ]

Outputs:
  StackName:
    Description: The name of this stack.
    Value:  !Ref AWS::StackName

  RoleName:
    Description: The Name id for the SyntinelAllRole created.
    Value: !Ref EC2UtilsRole
    Export:
      Name: !Sub "${AWS::StackName}-RoleName"

  RoleArn:
    Description: The ARN of the SyntinelAllRole.
    Value: !GetAtt
        - EC2UtilsRole
        - Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleArn"

  RoleId:
    Description: The Role Id of the SyntinelAllRole.
    Value: !GetAtt
        - EC2UtilsRole
        - RoleId
    Export:
      Name: !Sub "${AWS::StackName}-RoleId"

  PolicyArn:
    Description: The ARN of the Resolver policy created.
    Value: !Ref EC2UtilsPolicy
    Export:
      Name: !Sub "${AWS::StackName}-PolicyArn"
