AWSTemplateFormatVersion: "2010-09-09"
Description: Creates and deploys the API gateway objects for running the Syntinel application.

Parameters:
  ##### Lambda Function ARNs #####
  CoreLambdaCloudStackName:
    Type: String
    Default: syntinel-core-lambda
    Description: (Required) The name for the cloudformation stack used to create the Lambda methods.

  SignalLambdaProcessorArn:
    Type: String
    Description: (Optional) The ARN for the Lambda function that processes Signal messages. Overrides value from CloudStack.

  CueLambdaProcessorArn:
    Type: String
    Description: (Optional) The ARN for the Lambda function that processes Cue messages. Overrides value from CloudStack.

  StatusLambdaProcessorArn:
    Type: String
    Description: (Optional) The ARN for the Lambda function that processes Status messages. Overrides value from CloudStack.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Cloud Formation Stacks"
      Parameters:
      - CoreLambdaCloudStackName
    - Label:
        default: "Lambda Function ARNs"
      Parameters:
      - SignalLambdaProcessorArn
      - CueLambdaProcessorArn
      - StatusLambdaProcessorArn

Conditions:
  SignalLambdaArnProvided : !Not [ !Equals [!Ref SignalLambdaProcessorArn, ""] ]
  CueLambdaArnProvided : !Not [ !Equals [!Ref CueLambdaProcessorArn, ""] ]
  StatusLambdaArnProvided : !Not [ !Equals [!Ref StatusLambdaProcessorArn, ""] ]

Resources:
  # Main Rest API
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: syntinel
      Description: API Entry points for the Syntinel application.
      EndpointConfiguration:
        Types:
        - REGIONAL

  # Models
  SignalModel: 
    Type: AWS::ApiGateway::Model
    Properties:
      Name: Signal
      Description: Model for a Signal message.
      ContentType: application/json
      RestApiId: !Ref RestApi
      Schema: |
        {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "object",
          "required": [ "name", "description", "cues" ],
          "properties": {
              "name": { "type": "string" },
              "description": { "type": "string" },
              "maxReplies": { "type": "integer" },
              "reporterId": { "type": "string" },
              "cues": {
                  "type": "object",
                  "additionalProperties": {
                      "type": "object",
                      "required": [ "name", "description", "resolver" ],
                      "properties": {
                          "name": { "type": "string" },
                          "description": { "type": "string" },
                          "resolver": {
                              "type": "object",
                              "required": [ "name" ],
                              "properties": {
                                  "name": { "type": "string" },
                                  "config": { "type": "object"}
                              }
                          },
                          "inputs": {
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "required": ["name", "type"],
                                  "properties": {
                                      "name": { "type": "string" },
                                      "description": { "type": "string" },
                                      "type": { "type": "string" },
                                      "defaultValue": { "type": "string" },
                                      "allowMultipleValues": { "type": "boolean" },
                                      "values": { 
                                          "type": "array",
                                          "items": {
                                              "type": "object",
                                              "additionalProperties": {
                                                  "type": "string"
                                              }
                                          }
                                      }
                                  }
                              }
                          },
                          "actions": {
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "required": ["name", "type"],
                                  "properties": {
                                      "name": { "type": "string" },
                                      "description": { "type": "string" },
                                      "type": { "type": "string" },
                                      "defaultValue": { "type": "string" },
                                      "allowMultipleValues": { "type": "boolean" },
                                      "values": { 
                                          "type": "object",
                                          "additionalProperties": {
                                              "type": "string"
                                          }
                                      }
                                  }
                              }
                          },
                          "defaultAction": { "type": "string" }
                      }
                  }
              },
              "defaultCue": { "type": "string" },
              "defaultCueTimeout": { "type": "integer" }
          }
        }

  CueModel: 
    Type: AWS::ApiGateway::Model
    Properties:
      Name: Cue
      Description: Model for a Cue message.
      ContentType: application/json
      RestApiId: !Ref RestApi
      Schema: |
        {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "type": "object",
            "required": [ "id", "cue" ],
            "properties": {
                "id": { "type": "string" },
                "cue": { "type": "string" },
                "variables": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [ "name", "values" ],
                        "properties": {
                            "name": { "type": "string" },
                            "values": { 
                                "type": "array",
                                "items": { "type": "string" }
                            }
                        }
                    }
                }
            }
        }

  StatusModel: 
    Type: AWS::ApiGateway::Model
    Properties:
      Name: Status
      Description: Model for a Status message.
      ContentType: application/json
      RestApiId: !Ref RestApi
      Schema: |
        {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "type": "object",
            "required": [ "id" ],
            "properties": {
                "id": { "type": "string" },
                "actionId": { "type": "string" },
                "status": { "type": "string" },
                "closeSignal": { "type": "boolean" },
                "isValidReply": { "type": "boolean" },
                "data": { "type": "object" }
            }
        }

  # Resources
  AdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt
        - RestApi
        - RootResourceId
      PathPart: admin

  CueResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt
        - RestApi
        - RootResourceId
      PathPart: cue

  SignalResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt
        - RestApi
        - RootResourceId
      PathPart: signal

  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      PathPart: status
      ParentId: !GetAtt
        - RestApi
        - RootResourceId

  ChannelAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref AdminResource
      PathPart: channel

  ReporterAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref AdminResource
      PathPart: reporter

  SubscriberAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref AdminResource
      PathPart: subscriber

  # Request Validators
  BodyRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: Validate Body Only
      RestApiId: !Ref RestApi
      ValidateRequestBody: true
      ValidateRequestParameters: false

  # Methods
  HelloWorldMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: { "Fn::GetAtt": ["RestApi", "RootResourceId"] }
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{'statusCode': 200}"
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: "{\"message\": \"Hello From Syntinel.\"}"
            text/html: Hello From Syntinel.
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty

  SignalPostMethod:
    Type:  AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref SignalResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !If [ SignalLambdaArnProvided, !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignalLambdaProcessorArn}/invocations", { "Fn::ImportValue" : { "Fn::Sub" : "${CoreLambdaCloudStackName}-SyntinelProcessSignalFunctionUrl" } } ]
        IntegrationResponses:
        - StatusCode: 200          
      RequestValidatorId: !Ref BodyRequestValidator
      RequestModels:
        application/json: !Ref SignalModel
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty

  CuePostMethod:
    Type:  AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref CueResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !If [ CueLambdaArnProvided, !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CueLambdaProcessorArn}/invocations", { "Fn::ImportValue" : { "Fn::Sub" : "${CoreLambdaCloudStackName}-SyntinelProcessCueFunctionUrl" } } ]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "$input.body"
          application/x-www-form-urlencoded: "{ \"_qs\": \"$input.body\" }"
        IntegrationResponses:
        - StatusCode: 200          
      RequestValidatorId: !Ref BodyRequestValidator
      RequestModels:
        application/json: !Ref CueModel
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty

  StatusPostMethod:
    Type:  AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StatusResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !If [ StatusLambdaArnProvided, !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StatusLambdaProcessorArn}/invocations", { "Fn::ImportValue" : { "Fn::Sub" : "${CoreLambdaCloudStackName}-SyntinelProcessStatusFunctionUrl" } } ]
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ""
      RequestValidatorId: !Ref BodyRequestValidator
      RequestModels:
        application/json: !Ref StatusModel
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty

  # Grant ApiGateway Permission To Call The Lambda Functions
  SyntinelProcessSignalPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !If [ SignalLambdaArnProvided, !Ref SignalLambdaProcessorArn, { "Fn::ImportValue" : { "Fn::Sub" : "${CoreLambdaCloudStackName}-SyntinelProcessSignalFunctionArn" } } ]
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":", { "Ref": "RestApi" }, "/*/*/*" ] ] }            

  SyntinelProcessCuePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !If [ CueLambdaArnProvided, !Ref CueLambdaProcessorArn, { "Fn::ImportValue" : { "Fn::Sub" : "${CoreLambdaCloudStackName}-SyntinelProcessCueFunctionArn" } } ]
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":", { "Ref": "RestApi" }, "/*/*/*" ] ] }            

  SyntinelProcessStatusPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !If [ StatusLambdaArnProvided, !Ref StatusLambdaProcessorArn, { "Fn::ImportValue" : { "Fn::Sub" : "${CoreLambdaCloudStackName}-SyntinelProcessStatusFunctionArn" } } ]
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":", { "Ref": "RestApi" }, "/*/*/*" ] ] }            

Outputs:
  StackName:
    Description: The name of this stack.
    Value:  !Ref AWS::StackName

  ApiGateway:
    Description: The resource id for the API Gateway.  Used by subscriber templates to add channel specific objects into the Api Gateway.
    Value: !Ref RestApi
    Export:
      Name: !Sub "${AWS::StackName}-SyntinelApiGateway"

  SubscriberCueResourceId:
    Description: The resource id for the cue resource.  Used by subscriber templates to add return entry points into the Api Gateway.
    Value: !Ref CueResource
    Export:
      Name: !Sub "${AWS::StackName}-SyntinelSubscriberCueResourceId"

